import pygame
import random
import math
import numpy as np
scalefactor = 100
c = 299792458 # speed of light
G = 6.67430e-11 # gravitational constant
Theta =8.8*10**26
WINDOW_SIZE = (1800, 1000)
DT = 0.003  # time step in seconds
particle_amount=200
black_hole_mass = 5*10**14



# Initialize Pygame
pygame.init()

# Set the display
screen = pygame.display.set_mode(WINDOW_SIZE)

# Set the background color
screen.fill((0, 0, 0))

# List to store particles representing the stars
particles = []
black_holes=[]

black_hole = {
    'x': WINDOW_SIZE[0] / 2,
    'y': WINDOW_SIZE[1] / 2,
    'vx': random.uniform(-300, 300),
    'vy': random.uniform(-300, 300),
    'ax': 0,
    'ay': 0
}


# Add the black hole

black_hole_x, black_hole_y = WINDOW_SIZE[0]/2, WINDOW_SIZE[1]/2


# Add 100 particles to the list
for i in range(particle_amount):
     pradius = random.uniform(3, 12)
     m_i = random.uniform(1*10**5, 2*10**11)
     particles.append([random.randint(0, 1800), random.randint(0, 1000), random.randint(-10, 10), random.randint(-10, 10), m_i, pradius])

# Create a list to store the position of each particle at each time step
positions = []
for i in range(len(particles)):
    positions.append([])

def trim_trajectory(trajectory):
    while len(trajectory) > 6:
        trajectory.pop()
    return trajectory

# Main loop to update the screen
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
            positions = []
            for i in range(len(particles)):
                positions.append([])
                
        elif event.type == pygame.MOUSEMOTION:
            # Update the black hole position based on the mouse position
            black_hole_x = event.pos[0]
            black_hole_y = event.pos[1]
    pygame.draw.circle(screen, (255,234,180), (black_hole_x, black_hole_y), 20)        
            
    
    # Clear the screen
    screen.fill((0, 0, 0))
    pygame.draw.circle(screen, (255,234,180), (black_hole_x, black_hole_y), 20)
    
    


    # Draw the particles representing the stars
    for i, particle_i in enumerate(particles):
        
        pygame.draw.circle(screen, (200, 170, 160), (int(particle_i[0]), int(particle_i[1])), int(particle_i[5]))

        # Calculate the acceleration of particle i due to other particles
        ax = 0
        ay = 0
        for j, particle_j in enumerate(particles):
            if i != j:
                dx = particle_j[0] - particle_i[0]
                dy = particle_j[1] - particle_i[1]
                r = math.sqrt(dx**2 + dy**2)
                #inertial mass
                a = G * m_i / r**2
                m_i= m_i* (1 - ((2 * c**2) / (abs(a) * Theta)))
                ax += ((2 * G * m_i * c**2) / Theta)**1/4
                ay += ((2 * G * m_i * c**2) / Theta)**1/4


        # Update the velocity of particle i based on the acceleration
        particle_i[2] += ax / scalefactor
        particle_i[3] += ay / scalefactor

        # Update the position of particle i based on the velocity
        particle_i[0] += particle_i[2] / scalefactor
        particle_i[1] += particle_i[3] / scalefactor
        
        # Add the current position to the list for this particle
        positions[i].append((int(particle_i[0]), int(particle_i[1])))

        # Draw the particle's trajectory
        for j in range(1, len(positions[i])):
            pygame.draw.line(screen, (67, 40, 79), positions[i][j-1], positions[i][j], 1)
            trim_trajectory(particle_trajectory)  
            
            

        
# Add the current position to the list for this particle
        particle_trajectory = []
        particle_trajectory.append((int(particle_i[0]), int(particle_i[1])))
        for i in range(len(particle_trajectory)):
            if i > 0:
                pygame.draw.line(screen, (255, 0, 0), particle_trajectory[i - 1], particle_trajectory[i], 1)
        
        
        trim_trajectory(particle_trajectory[i])  
                 
    

        # Calculate the acceleration of particle i due to the black hole
        dx = black_hole_x - particle_i[0]
        dy = black_hole_y - particle_i[1]
        r = math.sqrt(dx**2 + dy**2)
        a = G * black_hole_mass / r**2
        black_hole_mass= black_hole_mass* (1 - ((2 * c**2) / (abs(a) * Theta)))
        ax += a * dx / r
        ay += a * dy / r

        # Update the velocity of particle i based on the acceleration
        particle_i[2] += ax + (((2 * G * black_hole_mass * c**2) / Theta)**1/4) / 50
        particle_i[3] += ay + (((2 * G * black_hole_mass * c**2) / Theta)**1/4) / 50

        # Update the position of particle i based on the velocity
        particle_i[0] += particle_i[2] / scalefactor
        particle_i[1] += particle_i[3] / scalefactor
        
        # Update black hole position

    
    # choose a radius for the black hole
    #pygame.draw.circle(screen, (5, 5, 5), (int(black_hole_x), int(black_hole_y)), int(black_hole_radius), 0)
    #pygame.draw.circle(screen, (255, 255, 255), (int(black_hole_x), int(black_hole_y)), int(black_hole_radius), 2)       

            
        


    # Update the screen
    pygame.display.flip()

# Quit Pygame
pygame.quit()
